{"version":3,"sources":["components/CustomButtonComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","borderColor","border","color","children","height","width","onClick","radius","style","backgroundColor","borderRadius","updateCounter","buttonID","counterUpdate","updateFunc","console","log","App","useState","counterIncrease","updateIncrease","counterDecrease","updateDecrease","className","position","right","bottom","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAuCeA,EA1BiB,SAAC,GAS1B,IARHC,EAQE,EARFA,YACAC,EAOE,EAPFA,OACAC,EAME,EANFA,MACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,OACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,QACAC,EACE,EADFA,OAEA,OACI,wBACID,QAASA,EACTE,MAAO,CACHR,cACAS,gBAAiBP,EACjBD,SACAS,aAAcH,EACdH,SACAC,SARR,SAUKF,KCYb,SAASQ,EAAcC,EAAkBC,EAAuBC,GAC5C,YAAZF,EAEAE,EADAD,GAAiB,GAEE,YAAZD,EAEPE,EADAD,GAAiB,GAGjBE,QAAQC,IAAI,wBAILC,MAnDf,WACI,IACA,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CF,mBAAS,GAAnD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,sFAGA,sBAAKf,MAAO,CAAEgB,SAAS,WAAYC,MAAM,IAAKC,OAAO,KAArD,cAA8DP,EAA9D,OACA,qBAAKX,MAAS,CAAEgB,SAAS,WAAYC,MAAM,IAAKC,OAAO,KAAvD,SACI,cAAC,EAAD,CACI1B,YAAY,OACZE,MAAM,OACNE,OAAO,OACPC,MAAO,QACPC,QAAU,WAENK,EADW,WACaQ,EAAiBC,IAPjD,8BAUJ,sBAAKZ,MAAO,CAAEgB,SAAS,WAAYG,KAAK,IAAKD,OAAO,KAApD,cAA6DL,EAA7D,OACA,qBAAKb,MAAS,CAAEgB,SAAS,WAAYG,KAAK,IAAKD,OAAO,KAAtD,SACI,cAAC,EAAD,CACI1B,YAAY,OACZE,MAAM,QACNE,OAAO,OACPC,MAAO,QACPC,QAAU,WAENK,EADW,WACaU,EAAiBC,IAPjD,oCCjBLM,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.21ff17eb.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n    borderColor?: string;\n    border?: string;\n    color: string;\n    children?: React.ReactNode;\n    height: string;\n    width: string;\n    onClick: () => void;\n    radius?: string\n}\n\nconst Button: React.FC<Props> = ({ \n    borderColor,\n    border,\n    color,\n    children,\n    height,\n    width,\n    onClick, \n    radius\n}) => { \n    return (\n        <button \n            onClick={onClick}\n            style={{\n                borderColor,\n                backgroundColor: color,\n                border,\n                borderRadius: radius,\n                height,\n                width,\n            }}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n//import logo from \"./logo.svg\";\nimport React, { useState} from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/CustomButtonComponent\";\n\nfunction App(this: any): JSX.Element {  \n    let buttonID = \"\";\n    const [counterIncrease, updateIncrease] = useState(0);\n    const [counterDecrease, updateDecrease] = useState(0);\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>\n                    Super cool and very well-thought-out welcome message!\n                </p>\n                <div style={{ position:\"relative\", right:660, bottom:250 }}> {counterIncrease} </div>\n                <div style = {{ position:\"relative\", right:700, bottom:230 }}> \n                    <Button \n                        borderColor=\"none\"\n                        color=\"cyan\"\n                        height=\"20px\" \n                        width={\"100px\"}                \n                        onClick={ () => {\n                            buttonID = \"increase\";\n                            updateCounter(buttonID, counterIncrease, updateIncrease);\n                        }}> Increase Me! </Button> \n                </div>\n                <div style={{ position:\"relative\", left:740, bottom:320 }}> {counterDecrease} </div>\n                <div style = {{ position:\"relative\", left:700, bottom:300 }}> \n                    <Button \n                        borderColor=\"none\"\n                        color=\"coral\"\n                        height=\"20px\" \n                        width={\"100px\"}                \n                        onClick={ () => {\n                            buttonID = \"decrease\";\n                            updateCounter(buttonID, counterDecrease, updateDecrease);\n                        }}> Decrease Me! </Button> \n                </div>\n\n            </header></div>\n    );\n}\n\nfunction updateCounter(buttonID: string, counterUpdate: number, updateFunc: { (value: React.SetStateAction<number>): void; (arg0: number): void; }) {\n    if (buttonID == \"increase\") {\n        counterUpdate += 1;\n        updateFunc(counterUpdate);\n    } else if (buttonID == \"decrease\"){\n        counterUpdate -= 1;\n        updateFunc(counterUpdate);\n    } else {\n        console.log(\"well that's not good\");\n    }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}